  - platform: sql
    db_url: !secret recorder_db_url
    queries:
      - name: Portfolio morning
        query: "SELECT state FROM states WHERE entity_id='sensor.personal_capital_investments' and (HOUR(last_changed) >= 22 and (DATEDIFF(NOW(), last_changed) = 1 or DATEDIFF(NOW(), last_changed) = 2 or DATEDIFF(NOW(), last_changed) = 3)) ORDER BY last_changed desc LIMIT 1;"
        column: 'state'
        unit_of_measurement: $
  - platform: personalcapital
    email: !secret pc_username
    password: !secret pc_password
  - platform: arlo
    monitored_conditions:
      - captured_today
      - last_capture
      - battery_level
      - signal_strength
  - platform: futures_cnn
    resources:
      - sp
      - sp_change_pct
      - sp_change
      - dow
      - dow_change_pct
      - dow_change
      - nasdaq
      - nasdaq_change_pct
      - nasdaq_change
  - platform: uscis
    case_id: !secret alok_485
    friendly_name: Alok 485
  - platform: uscis
    case_id: !secret rashmi_485
    friendly_name: Rashmi 485
  - platform: uscis
    case_id: !secret arnav_485
    friendly_name: Arnav 485
  - platform: pollen
    zip_code: !secret home_zip
    monitored_conditions:
      - allergy_average_forecasted
      - disease_average_forecasted
  - platform: version
  - platform: uptime
    unit_of_measurement: minutes
  # - platform: cert_expiry
  #   host: !secret ha_url
  - platform: glances
    host: 192.168.2.212
    resources:
      - 'disk_use_percent'
      - 'memory_use_percent'
      - 'processor_load'
  - platform: speedtest
    hour:
      - 12
    monitored_conditions:
      - download
  - platform: history_stats
    name: Total TV Time
    entity_id: media_player.panasonic_viera_tv
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Downstairs heat
    entity_id: sensor.downstairsthermoper
    state: 'heat'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Downstairs cool
    entity_id: sensor.downstairsthermoper
    state: 'cool'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Upstairs heat
    entity_id: sensor.upstairsthermoper
    state: 'heat'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Upstairs cool
    entity_id: sensor.upstairsthermoper
    state: 'cool'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Master heat
    entity_id: sensor.masterthermoper
    state: 'heat'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Master cool
    entity_id: sensor.masterthermoper
    state: 'cool'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: plex
    name: PlexSpy
    host: 192.168.2.212
    port: 32400
    # token: !secret plex_token
    username: !secret plex_user
    password: !secret plex_password
#Morning Commute Google Travel Time Sensor
  - platform: google_travel_time
    name: Morning Commute
    api_key: !secret google_key
    origin: !secret add_home
    destination: !secret add_buckhead
#Evening Commute Google Travel Time Sensor
  - platform: google_travel_time
    name: Evening Commute
    api_key: !secret google_key
    origin: !secret add_buckhead
    destination: !secret add_home
  - platform: google_travel_time
    name: Alok to Home
    friendly_name: "Commute to Home"
    api_key: !secret google_key
    origin: device_tracker.alok_alok
    destination: !secret add_home
  - platform: wunderground
    api_key: !secret wunderground_key
    pws_id: !secret wunderground_pws
    monitored_conditions:
      - weather
      - temp_f
      - wind_string
      - relative_humidity
  - platform: gearbest
    currency: USD
    items:
      - url: https://www.gearbest.com/alarm-systems/pp_659226.html
        name: Xiaomi Aqara Human Body Sensor
      - url: https://www.gearbest.com/access-control/pp_626702.html
        name: Xiaomi Aqara Temperature Humidity Sensor
      - url: https://www.gearbest.com/ip-cameras/pp_693217.html
        name: Xiaomi Dafang Camera
      - url: https://www.gearbest.com/smart-light-bulb/pp_257677.html
        name: Xiaomi Door Window Sensor
  - platform: alpha_vantage
    api_key: !secret alphavantage_key
    foreign_exchange:
      - from: USD
        to: INR
        name: USDINR
  # - platform: currencylayer
  #   api_key: !secret currencylayer_key
  #   base: USD
  #   quote:
  #     - INR
  - platform: mqtt
    state_topic: "owntracks/pi/rashmiphone/step"
    name: "Steps Rashmi"
    value_template: '{{ value_json.steps }}'
  - platform: mqtt
    state_topic: "owntracks/pi/alokphone/step"
    name: "Steps Alok"
    value_template: '{{ value_json.steps }}'
  - platform: command_line
    name: "PyPi HASS Version"
    command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"
  # - platform: command_line
  #   name: "Download Grafana"
  #   command: !secret grafana_temperature
  #   scan_interval: 120
  - platform: command_line
    name: SSL certificate expiry
    unit_of_measurement: days
    scan_interval: 86400
    command: !secret cert_expiry
  - platform: command_line
    name: 10 Year Treasury
    unit_of_measurement: '%'
    scan_interval: 18000
    command: "wget -O - -q http://money.cnn.com/data/premarket | grep 'last_572094' | awk -F'>' '{print $3}' | awk -F'<' '{print $1}'"
  - platform: scrape
    resource: http://money.cnn.com/data/premarket/
    name: Curr Future
    scan_interval: 86400
    # select: ".wsod_bold.wsod_aRight span"
    select: ".wsod_bold.wsod_aRight"
  - platform: template
    sensors:
      iframe_windy:
        value_template: iframe
      livingroom_temp_rounded:
        friendly_name: "Living room temperature"
        value_template: "{{states('sensor.temperature_158d0001ab3c88')|round}}"
      study_temp_rounded:
        friendly_name: "Study temperature"
        value_template: "{{states('sensor.temperature_158d0001ab3b2b')|round}}"
      battery_status:
        friendly_name: "Battery Status"
        value_template: >-
          {%- set threshold = 25 -%}
          {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'binary_sensor', 'camera'] -%}
          {%- for domain in domains -%}
          {%- for item in states[domain] if ((item.attributes.battery_low is defined and item.attributes['battery_low'] == true) or (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold)) -%}
              {{ item.name }}{%- if not loop.last %}, {% endif -%}
          {%- endfor -%}
          {%- endfor -%}
      hassuptime:
        friendly_name: "HASS Uptime"
        value_template: >-
          {% set uptime = states.sensor.uptime.state | round %}
          {% set minutes = (uptime % 60) | int %}
          {% set hours = ((uptime / 60) % 24) | int %}
          {% set days = (uptime / 1440) | int %}
          {%- if days > 0 -%}
            {%- if days == 1 -%}
              1 day
            {%- else -%}
              {{ days }} days
            {%- endif -%}
            {{ ', ' }}
          {%- endif -%}
          {{ '%02d' % hours }}:{{ '%02d' % minutes }} hrs
      downstairs_hvac_runtime:
        friendly_name: "Downstairs HVAC Runtime"
        unit_of_measurement: "h"
        value_template: >-
           {%- if [states.sensor.downstairs_cool.state|float, states.sensor.downstairs_heat.state|float, 0]|max != None -%}
             {{ [states.sensor.downstairs_cool.state|float, states.sensor.downstairs_heat.state|float, 0]|max }}
           {%- else -%}
             0
           {%- endif -%}
        icon_template: >-
          {%- if states('sensor.downstairs_cool')|default(0) < states('sensor.downstairs_heat')|default(0) -%}
            mdi:fire
          {%- elif states('sensor.downstairs_cool')|default(0) > states('sensor.downstairs_heat')|default(0) -%}
            mdi:snowflake
          {%- endif -%}
      upstairs_hvac_runtime:
        friendly_name: "Upstairs HVAC Runtime"
        unit_of_measurement: "h"
        value_template: >-
           {%- if [states.sensor.upstairs_cool.state|float, states.sensor.upstairs_heat.state|float, 0]|max != None -%}
             {{ [states.sensor.upstairs_cool.state|float, states.sensor.upstairs_heat.state|float, 0]|max }}
           {%- else -%}
             0
           {%- endif -%}
        icon_template: >-
          {%- if states('sensor.upstairs_cool')|default(0) < states('sensor.upstairs_heat')|default(0) -%}
            mdi:fire
          {%- elif states('sensor.upstairs_cool')|default(0) > states('sensor.upstairs_heat')|default(0) -%}
            mdi:snowflake
          {%- endif -%}
      master_hvac_runtime:
        friendly_name: "Master HVAC Runtime"
        unit_of_measurement: "h"
        value_template: >-
           {%- if [states.sensor.master_cool.state|float, states.sensor.master_heat.state|float, 0]|max != None -%}
             {{ [states.sensor.master_cool.state|float, states.sensor.master_heat.state|float, 0]|max }}
           {%- else -%}
             0
           {%- endif -%}
        icon_template: >-
          {%- if states('sensor.master_cool')|default(0) < states('sensor.master_heat')|default(0) -%}
            mdi:fire
          {%- elif states('sensor.master_cool')|default(0) > states('sensor.master_heat')|default(0) -%}
            mdi:snowflake
          {%- endif -%}
      wemopowerused:
        friendly_name: "Wemo Current Power"
        unit_of_measurement: "w"
        value_template: >-
           {%- if states.switch.wemoinsight.attributes.current_power_w != None -%}
             {{(states.switch.wemoinsight.attributes|default({})).current_power_w|default(0)|round(2)}}
           {%- else -%}
             0
           {%- endif -%}
      portfolioval:
        friendly_name: "Portfolio Value"
        unit_of_measurement: "$"
        value_template: >-
           {%- if states.input_number.portfoliovalue.state != None -%}
             {{states.input_number.portfoliovalue.state|default(0)|round(2)}}
           {%- else -%}
             0
           {%- endif -%}
      portfoliochange:
        friendly_name: "Portfolio Change"
        unit_of_measurement: "$"
        value_template: >-
           {%- if states.input_number.portfoliochange.state != None -%}
             {{states.input_number.portfoliochange.state|default(0)|round(2)}}
           {%- else -%}
             0
           {%- endif -%}
      portfoliochange2:
        friendly_name: "Portfolio Change (PC)"
        unit_of_measurement: "$"
        value_template: >-
           {{(states('sensor.personal_capital_investments')|float - states('sensor.portfolio_morning')|float)|round (2)}}
      hvacmode:
        friendly_name: "HVAC Mode"
        value_template: >-
          {%- if states.climate.upstairs.attributes.operation == "heat" -%}
            heat
          {%- elif states.climate.downstairs.attributes.operation == "cool" -%}
            cool
          {%- endif -%}
        icon_template: >-
          {%- if states.climate.upstairs.attributes.operation == "heat" -%}
            mdi:fire
          {%- elif states.climate.downstairs.attributes.operation == "cool" -%}
            mdi:snowflake
          {%- endif -%}
      # ringvideourl:
      #   friendly_name: "Ring Video URL"
      #   value_template: >-
      #     {{state_attr('camera.front_door', 'video_url').split('?')[0]}}
      garagedoorbattery:
        friendly_name: "Garage Door Sensor Battery"
        unit_of_measurement: "%"
        value_template: >-
           {%- if states.zwave.garage_door_tilt_sensor != None -%}
             {{ states.zwave.garage_door_tilt_sensor.attributes.battery_level }}
           {%- else -%}
             unknown
           {%- endif -%}
      downstairsthermoper:
        friendly_name: "Downstairs Thermostat"
        value_template: >-
           {%- if states.climate.downstairs != None -%}
             {{ states.climate.downstairs.attributes.operation }}
           {%- else -%}
             unknown
           {%- endif -%}
        icon_template: >-
          {%- if states.climate.downstairs.attributes.operation == "heat" -%}
            mdi:fire
          {%- elif states.climate.downstairs.attributes.operation == "cool" -%}
            mdi:snowflake
          {%- else -%}
            mdi:fan
          {%- endif -%}
      upstairsthermoper:
        friendly_name: "Upstairs Thermostat"
        value_template: >-
           {%- if states.climate.upstairs != None -%}
             {{ states.climate.upstairs.attributes.operation }}
           {%- else -%}
             unknown
           {%- endif -%}
        icon_template: >-
          {%- if states.climate.upstairs.attributes.operation == "heat" -%}
            mdi:fire
          {%- elif states.climate.upstairs.attributes.operation ==  "cool" -%}
            mdi:snowflake
          {%- else -%}
            mdi:fan
          {%- endif -%}
      masterthermoper:
        friendly_name: "Master Thermostat"
        value_template: >-
           {%- if states.climate.bedroom != None -%}
             {{ states.climate.bedroom.attributes.operation }}
           {%- else -%}
             unknown
           {%- endif -%}
        icon_template: >-
          {%- if states.climate.bedroom.attributes.operation == "heat" -%}
            mdi:fire
          {%- elif states.climate.bedroom.attributes.operation ==  "cool" -%}
            mdi:snowflake
          {%- else -%}
            mdi:fan
          {%- endif -%}
      living_room:
        value_template: >-
          {%- if states.states.remote.livingroom != None -%}
            {{ states.remote.livingroom.attributes.current_activity }}
          {%- else -%}
            NA
          {%- endif -%}
      sonos_volume:
        value_template: >-
          {%- if states.media_player.livingroomsonos.attributes.volume_level != None -%}
            {{ (states.media_player.livingroomsonos.attributes.volume_level|default(0) * 100) |int }}
          {%- else -%}
            NA
          {%- endif -%}
        friendly_name: 'Sonos Volume'
      leeoalarmstatus:
        friendly_name: "Leeo Alarm"
        value_template: >-
           {%- if states.input_boolean.leeoalarm.state == 'off' -%}
              Off
           {%- elif states.input_boolean.leeoalarm.state == 'on' -%}
              Active
           {%- elif states.input_boolean.leeoalarm.state == None -%}
              unknown
           {%- endif -%}
      pollen_level:
        friendly_name: 'Pollen Level'
        value_template: >-
          {{ state_attr('sensor.allergy_index_forecasted_average_2', 'rating') }}
        entity_picture_template: >-
          {{ '/local/icons/' ~ state_attr('sensor.allergy_index_forecasted_average_2', 'rating').lower().replace('/', '-') ~ '.png'}}
      cold_flu_risk:
        friendly_name: 'Cold & Flu Risk'
        value_template: >-
          {{ state_attr('sensor.cold__flu_forecasted_average_2', 'rating') }}
        entity_picture_template: >-
          {{ '/local/icons/' ~ state_attr('sensor.cold__flu_forecasted_average_2', 'rating').lower().replace('/', '-') ~ '.png'}}
      emulated_hue_names:
        friendly_name: "Emulated Hue Names"
        value_template: >-
          {% for item in states if item.attributes.emulated_hue_name|length > 0-%}
            {%- if loop.first %}{% elif loop.last %}, and {% else %}, {% endif -%}
            {{item.attributes.emulated_hue_name|title}}
          {%- endfor -%}.
      backyard_camera_tags:
        friendly_name: 'Backyard Tags'
        value_template: >-
          {% set common_tags = ['Drawing','Black-and-white','Monochrome','White','Snow','Monochrome photography','Black','Darkness','Light', 'Winter', 'Recreation', 'Sport venue', 'Outdoor recreation', 'Flower', 'Plant', 'Lawn', 'Road surface', 'Asphalt', 'Woodland', 'Meadow', 'Plant', 'Yard', 'Garden', 'Tree', 'Park', 'Walkway', 'Grass', 'Backyard'] %}
          {% set new_tags = states.image_processing.tagbox_backyard.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %}, and {% else %},{% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv
      driveway_camera_tags:
        friendly_name: 'Driveway Tags'
        value_template: >-
          {% set common_tags = ['Drawing','Black-and-white','Monochrome','White','Snow','Monochrome photography','Black','Darkness','Light', 'Winter', 'Neighbourhood', 'Lawn', 'Public space', 'Lane', 'Road', 'Tarmac', 'City', 'Asphalt', 'Sidewalk', 'Road surface', 'Residential area', 'Suburb', 'City', 'Walkway', 'Flooring', 'Roof'] %}
          {% set new_tags = states.image_processing.tagbox_driveway.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %}, and {% else %},{% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

      patio_camera_tags:
        friendly_name: 'Patio Tags'
        value_template: >-
          {% set common_tags = ['Drawing','Black-and-white','Monochrome','White','Snow','Monochrome photography','Black','Darkness','Light', 'Winter', 'Soil', 'Roof', 'Road surface', 'Flooring', 'Walkway','Floor', 'Asphalt','Outdoor structure', 'Wall', 'Garden', 'Lawn', 'Yard', 'Grass', 'Backyard', 'Flower'] %}
          {% set new_tags = states.image_processing.tagbox_patio.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %}, and {% else %},{% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv

      porch_camera_tags:
        friendly_name: 'Porch Tags'
        value_template: >-
          {% set common_tags = ['Drawing','Black-and-white','Monochrome','White','Snow','Monochrome photography','Black','Darkness','Light', 'Winter', 'Walkway', 'Estate', 'Outdoor structure', 'Garden', 'Lawn', 'Yard', 'Flower', 'Backyard', 'Grass'] %}
          {% set new_tags = states.image_processing.tagbox_porch.attributes['tags']|map(attribute='name')|list %}
          {% macro tags_added(before_list, after_list) %}
            {%- for tag in after_list if tag != 'None' and tag not in before_list %}
              {%- if loop.first %}{% elif loop.last %}, and {% else %},{% endif -%}
              {{ tag }}
            {%- endfor -%}
          {%- endmacro -%}
          {%- macro list_diff(before_list, after_list) -%}
           {%- set added = tags_added(before_list, after_list) -%}
           {% if added | trim != "" %}{{ added }}{%- endif -%}
          {%- endmacro -%}
          {{ list_diff(common_tags, new_tags) }}
        icon_template: mdi:cctv
      # porchtags:
      #   friendly_name: "Porch Tags"
      #   value_template: >-
      #     {{ states('input_text.porch') }}
      # drivewaytags:
      #   friendly_name: "Driveway Tags"
      #   value_template: >-
      #     {{ states('input_text.driveway') }}
      # backyardtags:
      #   friendly_name: "Backyard Tags"
      #   value_template: >-
      #     {{ states('input_text.backyard') }}
      # patiotags:
      #   friendly_name: "Patio Tags"
      #   value_template: >-
      #     {{ states('input_text.patio') }}
      # porchfaces:
      #   friendly_name: "Porch Faces"
      #   value_template: >-
      #     {{ states('input_text.porchfaces') }}
      # drivewayfaces:
      #   friendly_name: "Driveway Faces"
      #   value_template: >-
      #     {{ states('input_text.drivewayfaces') }}
      # backyardfaces:
      #   friendly_name: "Backyard Faces"
      #   value_template: >-
      #     {{ states('input_text.backyardfaces') }}
      # patiofaces:
      #   friendly_name: "Patio Faces"
      #   value_template: >-
      #     {{ states('input_text.patiofaces') }}
